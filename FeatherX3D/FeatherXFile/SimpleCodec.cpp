
#include "MagiFileDef.h"
#include "SimpleCodec.h"

#include <iostream>
#include <time.h>

#include "../FeatherXBase/rijndael.h"
#include "../FeatherXBase/Base64.h"


namespace SimpleXORCodec
{
	const unsigned char szEncodeKey[] = 
	{
		0x30, 0x22, 0x41, 0xa8, 0x5b, 0xa6, 0x6a, 0x49, 0xbf, 0x53, 0x35, 0xe5, 0x9e, 0x0e, 0xec, 0xb8, 
		0x5e, 0x15, 0x1f, 0xc1, 0x4f, 0xec, 0x77, 0xe8, 0xb7, 0x4e, 0x87, 0xe6, 0xf5, 0x3c, 0xb3, 0x43, 
		0xcc, 0x53, 0x36, 0xac, 0x5a, 0x77, 0xb8, 0xdd, 0x30, 0x74, 0x8c, 0x4a, 0x9a, 0x9b, 0xbc, 0x0a, 
		0xa4, 0xad, 0xbb, 0x13, 0x4b, 0x8c, 0xd4, 0x80, 0xce, 0x65, 0x1d, 0x08, 0x5a, 0x6a, 0x6f, 0x25, 
		0xf9, 0x3f, 0xef, 0x1b, 0xa4, 0x72, 0x14, 0xed, 0x97, 0x22, 0x4a, 0x2e, 0xb8, 0x96, 0x4b, 0x8e, 
		0x96, 0x93, 0xf1, 0x28, 0xb2, 0x0b, 0x3c, 0xf8, 0x5d, 0xaa, 0xa9, 0x82, 0x13, 0x6e, 0xc1, 0xa9, 
		0x20, 0x57, 0xb2, 0x5b, 0x16, 0xcf, 0x9e, 0x5f, 0xd4, 0xcc, 0x2e, 0xf5, 0xc9, 0x4c, 0x1c, 0xee, 
		0xe3, 0x3f, 0x29, 0xb3, 0x06, 0x70, 0x43, 0x3d, 0xf5, 0x90, 0xa2, 0x42, 0x02, 0x98, 0x50, 0xfd, 
		0x5d, 0x4e, 0x92, 0xad, 0xad, 0x7f, 0xab, 0x60, 0x2c, 0xb8, 0x43, 0x76, 0x8f, 0x5f, 0xe6, 0xa7, 
		0x19, 0xe0, 0xb9, 0xb5, 0x62, 0x6b, 0xd4, 0x47, 0x69, 0x34, 0x0e, 0x6d, 0xa4, 0x52, 0xe3, 0x64, 
		0x4a, 0x65, 0x47, 0xf5, 0x3f, 0x53, 0x5e, 0x8b, 0x1b, 0xfd, 0x21, 0xf7, 0xba, 0x68, 0xf9, 0xdf, 
		0x68, 0xa8, 0x96, 0x0f, 0x8b, 0x01, 0x97, 0x58, 0x8c, 0x1e, 0xef, 0xb3, 0x41, 0x44, 0x21, 0xda, 
		0xe0, 0xf4, 0xe0, 0x2d, 0xcd, 0x0b, 0xf0, 0x5c, 0x59, 0xd6, 0x99, 0xe7, 0x01, 0x15, 0x67, 0x32, 
		0xe0, 0x12, 0x2f, 0xcd, 0xa2, 0xde, 0x52, 0xce, 0xec, 0xef, 0x77, 0x0e, 0xbc, 0x38, 0x64, 0x8d, 
		0xb4, 0xdb, 0x67, 0xff, 0xc8, 0x66, 0x0c, 0x8a, 0x60, 0xe1, 0x2e, 0x00, 0x43, 0xa9, 0x37, 0x9c, 
		0x11, 0xaa, 0xb9, 0x98, 0xed, 0x21, 0x35, 0xd4, 0xc3, 0xde, 0x65, 0x54, 0x9d, 0x1c, 0xb0, 0xa9, 
	};

	const unsigned long dwCrc32Table[] =
	{
		0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
		0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
		0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
		0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
		0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
		0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
		0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
		0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
		0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
		0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
		0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
		0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
		0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
		0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
		0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
		0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,

		0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
		0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
		0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
		0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
		0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
		0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
		0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
		0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
		0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
		0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
		0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
		0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
		0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
		0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
		0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
		0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,

		0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
		0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
		0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
		0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
		0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
		0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
		0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
		0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
		0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
		0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
		0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
		0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
		0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
		0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
		0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
		0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,

		0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
		0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
		0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
		0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
		0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
		0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
		0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
		0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
		0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
		0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
		0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
		0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
		0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
		0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
		0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
		0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
	};



	const int ENC_BUFF_SIZE = 1024*4;

	void MidCopy(CHAR *input, CHAR *output, int start_pos, int stop_pos)
	{
		int index = 0;
		for(int i = start_pos; i < stop_pos; i++)
		{
			output[index] = input[i];
			index++;
		}

		output[index] = 0;
	}

	int Randomize(int n)
	{
		srand((unsigned) time(NULL));
		for (int i = 0; i < (rand() % RAND_MAX); i++) (rand() % RAND_MAX);

		int ret=0;
		ret = rand() % n + 1;

		return ret;
	}

	int EncryptAndEncode(CHAR* szData, const UINT8 *pKey, CHAR *szResult)
	{
		CBase64  base64;

		BYTE pEncResult[ENC_BUFF_SIZE +16] = {0,};

		CHAR szEncode[(ENC_BUFF_SIZE +16)*2] = {0,};

		Rijndael rijEncrypt, rijDecrypt;

		if (rijEncrypt.init(Rijndael::CBC, Rijndael::Encrypt, pKey, Rijndael::Key32Bytes) == RIJNDAEL_SUCCESS)
		{
			rijEncrypt.padEncrypt((const BYTE*)szData,4096,(BYTE*)pEncResult);

			base64.Encrypt((const char*)pEncResult, 512, szEncode);

			strcpy(szResult, (char*)szEncode);
		}
		else
		{
	#ifdef _DEBUG
			std::cout << _T("Error initializing encryption structures !") << std::endl;
	#endif
		}

		return 0;
	}

	int DecryptAndDecode(CHAR* szData, const UINT8 *pKey, CHAR *szResult)
	{
		CBase64  base64;
		Rijndael rijDecrypt;

		CHAR pDecResult[ENC_BUFF_SIZE + 16] = {0,};
		CHAR szDecode[ENC_BUFF_SIZE] = {0,};

		
		base64.Decrypt(szData, strlen (szData), szDecode);
		
		if (rijDecrypt.init(Rijndael::CBC, Rijndael::Decrypt, pKey, Rijndael::Key32Bytes) == RIJNDAEL_SUCCESS)
		{
			rijDecrypt.blockDecrypt((const UINT8*)szDecode,4096,(UINT8*)pDecResult);
			strcpy(szResult, pDecResult);
		}
		else
		{
	#ifdef _DEBUG
			std::cout << _T("Error initializing encryption structures !") << std::endl;
	#endif
		}
		
		return 0;
	}
};